{"version":3,"sources":["img/garbage.svg","img/box.svg","img/circle.svg","img/polygon.svg","Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","mapboxgl","accessToken","process","Map","props","setDrawingMode","type","setState","on","setCoordinates","clickHandler","id","currentTarget","state","plot","coordinates","getLayer","removeLayer","removeSource","draw","e","getCanvas","style","cursor","lngLat","plotCoordinates","concat","lng","lat","Polygon","length","firstPoint","polygonCoordinates","off","Circle","radius","turf","distance","circleCoordinates","center","meters","latitude","stops","Math","cos","PI","base","BoundingBox","mirroredPoint1","mirroredPoint2","boundingBoxCoordinates","slice","splice","layerName","layerType","paint","addLayer","clear","layer","infoText","null","zoom","lineCoordinates","document","title","container","getElementById","this","dr","className","onClick","src","circleIcon","alt","polyIcon","boxIcon","trashIcon","JSON","stringify","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a574130d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/garbage.24ad147d.svg\";","module.exports = __webpack_public_path__ + \"static/media/box.638e008a.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle.1e2d0595.svg\";","module.exports = __webpack_public_path__ + \"static/media/polygon.df01d317.svg\";","import React, { Component } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport turf from 'turf';\r\nimport trashIcon from './img/garbage.svg';\r\nimport boxIcon from './img/box.svg';\r\nimport circleIcon from './img/circle.svg';\r\nimport polyIcon from './img/polygon.svg';\r\n\r\n\r\n\r\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\r\nlet map;\r\n\r\n// TODO: change document title\r\n\r\nclass Map extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lng: 36.81667,\r\n            lat: -1.28333,\r\n            zoom: 10,\r\n            lineCoordinates: [],\r\n            plotCoordinates: [],\r\n            boundingBoxCoordinates: null,\r\n            circleCoordinates: null,\r\n            polygonCoordinates: null,\r\n            type: null,            \r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Draw on a Map'; \r\n         map = new mapboxgl.Map({\r\n            container: document.getElementById('map'),\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom\r\n            });\r\n            document.title = 'Draw on a Map';        \r\n    }\r\n\r\n    setDrawingMode = (type) => {        \r\n        this.setState({  type });\r\n        map.on('click', this.setCoordinates);\r\n    }\r\n    \r\n    clickHandler = ({ currentTarget: { id } }) => {\r\n        const { type } = this.state;        \r\n        if(!type) {\r\n            this.setDrawingMode(id);\r\n        } else if( type === id ) {            \r\n            this[type]();\r\n        }               \r\n    }\r\n\r\n    plot = (coordinates) => {        \r\n        if(!map.getLayer('plotLayer')) {\r\n            this.draw('MultiPoint', coordinates, 'plotLayer', 'circle', {'circle-color': '#002080',\r\n            'circle-radius': 5});       \r\n        } else {\r\n            map.removeLayer('plotLayer');\r\n            map.removeSource('plotLayer');\r\n            this.draw('MultiPoint', coordinates, 'plotLayer', 'circle', {'circle-color': '#002080',\r\n            'circle-radius': 5});\r\n        }       \r\n    } \r\n\r\n    setCoordinates = (e) => {        \r\n        map.getCanvas().style.cursor = 'crosshair';\r\n        const coordinates = e.lngLat;\r\n        this.setState(state => {            \r\n            const plotCoordinates = state.plotCoordinates.concat([[coordinates.lng, coordinates.lat]]);\r\n            return { plotCoordinates };\r\n        });         \r\n        this.plot(this.state.plotCoordinates);             \r\n    }\r\n\r\n    Polygon = () => {        \r\n        const { plotCoordinates, type } = this.state;        \r\n        if (plotCoordinates.length > 2 && type === 'Polygon' && !map.getLayer('polygonLayer')) {\r\n            const firstPoint = plotCoordinates[0];\r\n            const polygonCoordinates = [[...plotCoordinates, [...firstPoint]]];\r\n            this.setState({ polygonCoordinates }, () => {\r\n                const { polygonCoordinates } = this.state;\r\n                this.draw(\r\n                    type,\r\n                    polygonCoordinates,\r\n                    'polygonLayer',\r\n                    'fill',\r\n                    { 'fill-color': '#3366ff', 'fill-opacity': .5, 'fill-outline-color': '#002080' }\r\n                    );\r\n            });             \r\n            map.off('click', this.setCoordinates);    \r\n            }   \r\n        }\r\n      \r\n     Circle = () => {\r\n         const { plotCoordinates, type } = this.state;    \r\n         if(plotCoordinates.length === 2 && type === 'Circle' && !map.getLayer('circleLayer')) {\r\n            const radius = turf.distance(plotCoordinates[0], plotCoordinates[1], 'kilometers') * 1000;\r\n            const metersToPixelsAtMaxZoom = (meters, latitude) => meters / 0.075 / Math.cos(latitude * Math.PI / 180);\r\n            const circleCoordinates = { center: plotCoordinates[0], radius };\r\n            this.setState({ circleCoordinates }, () => {\r\n                const { circleCoordinates } = this.state;\r\n                this.draw(\r\n                    'Point',\r\n                    circleCoordinates.center,\r\n                    'circleLayer',\r\n                    'circle',\r\n                    {   'circle-color':'#3366ff',\r\n                        'circle-opacity': .5,\r\n                        'circle-stroke-color': '#002080',  \r\n                        'circle-radius': {\r\n                                            stops: [[0, 0], [20, metersToPixelsAtMaxZoom(circleCoordinates.radius, circleCoordinates.center[1])]], base: 2\r\n                                        }\r\n                    }\r\n                );\r\n            }); \r\n             map.off('click', this.setCoordinates);          \r\n         }             \r\n          \r\n     }\r\n\r\n     BoundingBox = () => {\r\n         const { plotCoordinates, type } = this.state;  \r\n         if(plotCoordinates.length === 2 && type === 'BoundingBox' && !map.getLayer('boundingBoxLayer')) {  \r\n            const mirroredPoint1 = [plotCoordinates[1][0], plotCoordinates[0][1]]; \r\n            const mirroredPoint2 = [plotCoordinates[0][0], plotCoordinates[1][1]];\r\n            const boundingBoxCoordinates = plotCoordinates.slice();\r\n            boundingBoxCoordinates.splice(1, 0, mirroredPoint1);\r\n            boundingBoxCoordinates.splice(3, 0, mirroredPoint2);\r\n            this.setState({ boundingBoxCoordinates }, () => {   \r\n                const { boundingBoxCoordinates } = this.state;         \r\n                this.plot(boundingBoxCoordinates);\r\n                this.draw(\r\n                    'Polygon',\r\n                    [boundingBoxCoordinates],\r\n                    'boundingBoxLayer',\r\n                    'fill',\r\n                    {'fill-color':'#3366ff', 'fill-opacity': .5, 'fill-outline-color': '#002080' }\r\n                    );\r\n                });  \r\n            map.off('click', this.setCoordinates);\r\n         }\r\n     }       \r\n\r\n    draw = (type, coordinates, layerName, layerType, paint) => {\r\n           map.addLayer({\r\n            'id': layerName,\r\n            'type': layerType,\r\n            'source': {\r\n                'type': 'geojson',\r\n                'data': {\r\n                    'type': 'Feature',\r\n                    'geometry' : {\r\n                        'type': type,\r\n                        'coordinates': coordinates\r\n                    }\r\n                }\r\n            },\r\n            'layout': {},\r\n            'paint': paint\r\n        });\r\n    }\r\n\r\n\r\n    clear = () => {\r\n        const layerNames = ['plotLayer', 'polygonLayer', 'circleLayer', 'boundingBoxLayer'];\r\n        layerNames.map(layer => {\r\n            if(map.getLayer(layer)) {\r\n                map.removeLayer(layer);\r\n                map.removeSource(layer);\r\n            }\r\n        });       \r\n        this.setState(() => {\r\n            return {\r\n                plotCoordinates: [],\r\n                boundingBoxCoordinates: null,\r\n                circleCoordinates: null,\r\n                polygonCoordinates: null,\r\n                type: null,\r\n            }\r\n        });\r\n        map.off('click', this.setCoordinates);\r\n    }\r\n\r\n     infoText = {\r\n         Circle: 'Click on a point on the map to set the center, then click on another point to set the radius. Click on the Circle Tool button again to complete. Requires only two Points. Use the Clear button to reset the tools.',\r\n         BoundingBox: 'Click on two points on the map to set the corner edges of the bounding box and then click the Polygon tool again to close the shape. Requires only two Points. Use the Clear button to reset the tools.',\r\n         Polygon: 'Click on the map to set polygon points and then click the Polygon Tool again to close the shape. Use the Clear button to reset the tools.',\r\n         null: 'Click on a tool to set the drawing mode.'\r\n     }\r\n\r\n   render() {\r\n       const { type, boundingBoxCoordinates, circleCoordinates, polygonCoordinates, dr } = this.state;\r\n        return (\r\n            <div className='wrapper'>\r\n                <div className='header'></div>\r\n                <div className='main'>\r\n                    <div className='grid'>                \r\n                    <div className='map-style' id='map' />\r\n                    <div className=\"tools\">\r\n                    <h4 className=\"tools-heading\">Tools:</h4>\r\n                        <div className='drawing-controls'>                            \r\n                            <button className={type === 'Circle' ? 'active' : ''} onClick={this.clickHandler} id=\"Circle\"><span><img src={circleIcon} alt=\"circle-icon\"/></span></button>\r\n                        \r\n                            <button className={type === 'Polygon' ? 'active' : ''} onClick={this.clickHandler} id=\"Polygon\"><span><img src={polyIcon} alt=\"polygon-icon\"/></span></button>\r\n                            \r\n                            <button className={type === 'BoundingBox' ? 'active' : ''} onClick={this.clickHandler} id=\"BoundingBox\"><span><img src={boxIcon} alt=\"boxIcon\"/></span></button>\r\n                            \r\n                            <button onClick={this.clear} id=\"clear\"><span><img src={trashIcon} alt=\"clear-icon\"/></span></button>\r\n                        </div>\r\n                    </div>\r\n                    <div className='info'>                        \r\n                        <div className='info-box'>                        \r\n                            <h5 className=\"info-heading\">Drawing Mode: </h5>\r\n                              <p className=\"info-text\"><code>{type}</code></p>      \r\n                        </div>\r\n                        <div className=\"info-box\">\r\n                            <h5 className=\"info-heading\">Info:</h5>\r\n                            <p className=\"info-text\"><code >{this.infoText[type]}</code></p>\r\n                        </div>\r\n                        <div className='info-box'>\r\n                        <h5 className=\"info-heading\">Coordinates:</h5>\r\n\r\n                            { circleCoordinates  ?\r\n                            <div className=\"info-text\">\r\n                                <p>{JSON.stringify({circleCoordinates}, null,  4)}</p>  \r\n                            </div>       \r\n                            : null}\r\n\r\n                            { boundingBoxCoordinates  ?\r\n                            <div className=\"info-text\">\r\n                                <p>{JSON.stringify({boundingBoxCoordinates}, null,  4)}</p>  \r\n                            </div>       \r\n                            : null}\r\n\r\n                            { polygonCoordinates  ?\r\n                            <div className=\"info-text\">\r\n                                <p>{JSON.stringify({polygonCoordinates}, null,  4)}</p>  \r\n                            </div>       \r\n                            : null}\r\n\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Map;","import React from 'react';\nimport Map from './Map';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <Map />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}